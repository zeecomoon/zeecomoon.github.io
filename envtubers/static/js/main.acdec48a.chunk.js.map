{"version":3,"sources":["Live.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Live","state","isLoaded","isError","streams","fetch","process","then","res","json","result","updateStreams","setInterval","this","getTopStreams","setState","catch","err","streamers","ids","map","streamer","user_id","lookupTwitchInfo","loadingMsg","id","className","stream","key","channel","_id","href","url","alt","src","logo","display_name","description","slice","preview","medium","Math","random","game","viewers","status","React","Component","channels","a","channelChunks","chunk","promises","headers","Headers","Accept","request","Request","join","method","handleFetchError","Promise","all","flat","sort","b","response","ok","Error","statusText","arr","size","Array","from","length","ceil","v","i","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.acdec48a.chunk.js","sourcesContent":["import React from \"react\";\n\ntype LiveProps = {};\n\ntype LiveState = {\n  isLoaded: boolean;\n  isError: boolean;\n  streams: any[];\n};\n\nclass Live extends React.Component<LiveProps, LiveState> {\n  state: LiveState = {\n    isLoaded: false,\n    isError: false,\n    streams: [],\n  };\n\n  componentDidMount() {\n    fetch(process.env.PUBLIC_URL + \"/vtubers.json\")\n      .then((res) => res.json())\n      .then((result) => {\n        this.updateStreams(result);\n        setInterval(() => this.updateStreams(result), 1000 * 60 * 5);\n      });\n  }\n\n  updateStreams(result: any) {\n    this.getTopStreams(result)\n    .then((streams) => {\n      this.setState({\n        isLoaded: true,\n        streams: streams,\n      });\n    })\n    .catch((err) => {\n      if (!this.state.isLoaded) {\n        this.setState({\n          isError: true,\n        })\n      }\n    })\n  }\n\n  async getTopStreams(streamers: any[]): Promise<any[]> {\n    let ids: string[] = streamers.map((streamer) => streamer.user_id);\n    return lookupTwitchInfo(ids)\n  }\n\n  render() {\n    let streams: any[] = this.state.streams;\n    let loadingMsg: string = \"Loading your anime waifus and husbandos now...\"\n    if (this.state.isError) {\n        loadingMsg = \"Error loading data :( Try refreshing\"\n    }\n    if (!this.state.isLoaded) {\n      return (\n        <div id=\"live-channels\" className=\"col s10 m8 l6\">\n          <div className=\"live-channel card grey-text lighten-5\">\n            {loadingMsg}\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div id=\"live-channels\" className=\"col s12 m10 l6\">\n        {streams.map((stream) => {\n          return (\n            <div\n              className=\"live-channel card grey-text lighten-5\" key={stream.channel._id}\n            >\n              <div className=\"streamer\">\n                <a href={stream.channel.url}>\n                  <img\n                    alt=\"logo\"\n                    className=\"profile-pic circle\"\n                    src={stream.channel.logo}\n                  />\n                </a>\n                <div>\n                  <a href={stream.channel.url}>{stream.channel.display_name}</a>\n                </div>\n                <div className=\"card grey darken-4\">\n                  {stream.channel.description.slice(0, 300)}\n                </div>\n              </div>\n              <div className=\"playing\">\n                <a href={stream.channel.url}>\n                  <img alt=\"banner\" src={stream.preview.medium + \"?\" + Math.random()} />\n                </a>\n                <div className=\"streamInfo\">\n                  <a href={\"https://www.twitch.tv/directory/game\" + stream.game}>\n                    {stream.game}\n                  </a>{\" \"} \n                  <div>\n                    <strong>{stream.viewers}</strong> viewers\n                  </div>\n                </div>\n                <div className=\"divider\" />\n                <div>{stream.channel.status}</div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nasync function lookupTwitchInfo(channels: string[]) {\n  const channelChunks: string[][] = chunk(channels, 100);\n  const promises: Promise<any>[] = channelChunks.map((chunk) => {\n    let headers: Headers = new Headers({\n      Accept: \"application/vnd.twitchtv.v5+json\",\n      \"Client-ID\": \"kimne78kx3ncx6brgo4mv6wki5h1ko\",\n    });\n\n\n    let request: Request = new Request(\n      \"https://api.twitch.tv/kraken/streams?channel=\" + chunk.join(\",\"),\n      {\n        method: \"GET\",\n        headers: headers,\n      }\n    );\n\n\n    return fetch(request)\n      .then(handleFetchError)\n      .then(res => res.json())\n      .then(res => res.streams)\n  })\n\n  return Promise.all(promises)\n    .then(streams => streams.flat().sort((a, b) => b.viewers - a.viewers))\n}\n\nfunction handleFetchError(response: Response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\n\nconst chunk = (arr: any[], size: number) => {\n  return Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>\n    arr.slice(i * size, i * size + size)\n  );\n}\n\n\nexport default Live;\n","import React from \"react\";\nimport \"./App.css\";\nimport Live from \"./Live\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <div id=\"nav\" className=\"nav-wrapper purple lighten-3\">\n          <div id=\"logo\" className=\"title\"> \n            Live EN VTubers\n          </div>\n        </div>\n      </nav>\n      <div id=\"page\" className=\"row\">\n        <div className=\"col s0 m1 l3\"></div>\n        <Live />\n        <div className=\"col s0 m1 l3\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}